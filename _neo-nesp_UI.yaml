# neo-nesp UI

packages:
  colors: !include colors/HOMEASSISTANT

font:
  - file: 'gfonts://Roboto@400'
    glyphs: ' 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ°.:/+-%–'
    id: roboto_reg
    size: 24
    bpp: 4
    extras:
      # https://pictogrammers.github.io
      - file: "fonts/materialdesignicons-webfont.ttf"
        glyphs: [
          "\U000F050F", # mdi:thermometer
          "\U000F058E", # mdi:water-percent
          "\U000F0425", # mdi:power
          "\U000F0238", # mdi:fire
          "\U000F1A45", # mdi:heat-wave
          "\U000F0717", # mdi:snowflake
          "\U000F1A79", # mdi:sun-snowflake-variant
          "\U000F0210", # mdi:fan
#          "\U000F171D", # mdi:fan-auto
#          "\U000F1472", # mdi:fan-speed-1
#          "\U000F1473", # mdi:fan-speed-2
#          "\U000F1474", # mdi:fan-speed-3
#          "\U000F032A", # mdi:leaf
#          "\U000F04B9", # mdi:sofa
#          "\U000F14DE", # mdi:rocket-launch
#          "\U000F0D80", # mdi:home-floor-1
#          "\U000F0D81", # mdi:home-floor-2
#          "\U000F004D", # mdi:arrow-left
#          "\U000F09DF", # mdi:circle-small
#          "\U000F0E03", # mdi:thermometer-chevron-up
#          "\U000F0E02", # mdi:thermometer-chevron-down
#          "\U000F0594", # mdi:weather-night (clear)
#          "\U000F0590", # mdi:weather-cloudy (cloudy)
#          "\U000F0898", # mdi:weather-hurricane (cyclone, tropical_cyclone)
#          "\U000F0F30", # mdi:weather-hazy (dust, dusty, haze, hazy)
#          "\U000F0591", # mdi:weather-fog (fog)
#          "\U000F12CB", # mdi:snowflake-melt (frost)
#          "\U000F0596", # mdi:weather-pouring (heavy_shower, heavy_showers, rain)
#          "\U000F0F33", # mdi:weather-partly-rainy (light_rain)
#                        # mdi:weather-light-showers (light_shower, light_showers)
#          "\U000F0599", # mdi:weather-sunny (mostly_sunny, sunny)
#          "\U000F0595", # mdi:weather-partly-cloudy (partly_cloudy)
#          "\U000F0597", # mdi:weather-rainy (shower, showers)
#          "\U000F0598", # mdi:weather-snowy (snow)
#          "\U000F0593", # mdi:weather-lightning
#          "\U000F067E", # mdi:weather-lightning-rainy (storm, storms)
#          "\U000F059D", # mdi:weather-windy (wind, windy)
#          "\U000F0592", # mdi:weather-hail
          ]

  - file: 'gfonts://Roboto@400'
    glyphs: ' 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ°.:/+-%–'
    id: roboto_med
    size: 48
    bpp: 4
    extras:
      # https://pictogrammers.github.io
      - file: "fonts/materialdesignicons-webfont.ttf"
        glyphs: [
          "\U000F050F", # mdi:thermometer
          "\U000F058E", # mdi:water-percent
          "\U000F0425", # mdi:power
          "\U000F0238", # mdi:fire
          "\U000F1A45", # mdi:heat-wave
          "\U000F0717", # mdi:snowflake
          "\U000F1A79", # mdi:sun-snowflake-variant
          "\U000F0210", # mdi:fan
#          "\U000F171D", # mdi:fan-auto
#          "\U000F1472", # mdi:fan-speed-1
#          "\U000F1473", # mdi:fan-speed-2
#          "\U000F1474", # mdi:fan-speed-3
#          "\U000F032A", # mdi:leaf
#          "\U000F04B9", # mdi:sofa
#          "\U000F14DE", # mdi:rocket-launch
#          "\U000F0D80", # mdi:home-floor-1
#          "\U000F0D81", # mdi:home-floor-2
          "\U000F004D", # mdi:arrow-left
          "\U000F09DF", # mdi:circle-small
#          "\U000F0E03", # mdi:thermometer-chevron-up
#          "\U000F0E02", # mdi:thermometer-chevron-down
#          "\U000F0594", # mdi:weather-night (clear)
#          "\U000F0590", # mdi:weather-cloudy (cloudy)
#          "\U000F0898", # mdi:weather-hurricane (cyclone, tropical_cyclone)
#          "\U000F0F30", # mdi:weather-hazy (dust, dusty, haze, hazy)
#          "\U000F0591", # mdi:weather-fog (fog)
#          "\U000F12CB", # mdi:snowflake-melt (frost)
#          "\U000F0596", # mdi:weather-pouring (heavy_shower, heavy_showers, rain)
#          "\U000F0F33", # mdi:weather-partly-rainy (light_rain)
#                        # mdi:weather-light-showers (light_shower, light_showers)
#          "\U000F0599", # mdi:weather-sunny (mostly_sunny, sunny)
#          "\U000F0595", # mdi:weather-partly-cloudy (partly_cloudy)
#          "\U000F0597", # mdi:weather-rainy (shower, showers)
#          "\U000F0598", # mdi:weather-snowy (snow)
#          "\U000F0593", # mdi:weather-lightning
#          "\U000F067E", # mdi:weather-lightning-rainy (storm, storms)
#          "\U000F059D", # mdi:weather-windy (wind, windy)
#          "\U000F0592", # mdi:weather-hail
          "\U000F0419", # mdi:plus-circle-outline
          "\U000F0377", # mdi:minus-circle-outline
          "\U000F0493", # mdi:cog
          "\U000F1352", # mdi:hvac
          ]

  - file: 'gfonts://Roboto@400'
    glyphs: ' -0123456789.°C'
    id: roboto_huge
    size: 90
    bpp: 4
    extras:
      # https://pictogrammers.github.io
      - file: "fonts/materialdesignicons-webfont.ttf"
        glyphs: [
#          "\U000F171D", # mdi:fan-auto
#          "\U000F1472", # mdi:fan-speed-1
#          "\U000F1473", # mdi:fan-speed-2
#          "\U000F1474", # mdi:fan-speed-3
#          "\U000F0594", # mdi:weather-night (clear)
#          "\U000F0590", # mdi:weather-cloudy (cloudy)
#          "\U000F0898", # mdi:weather-hurricane (cyclone, tropical_cyclone)
#          "\U000F0F30", # mdi:weather-hazy (dust, dusty, haze, hazy)
#          "\U000F0591", # mdi:weather-fog (fog)
#          "\U000F12CB", # mdi:snowflake-melt (frost)
#          "\U000F0596", # mdi:weather-pouring (heavy_shower, heavy_showers, rain)
#          "\U000F0F33", # mdi:weather-partly-rainy (light_rain)
#                        # mdi:weather-light-showers (light_shower, light_showers)
#          "\U000F0599", # mdi:weather-sunny (mostly_sunny, sunny)
#          "\U000F0595", # mdi:weather-partly-cloudy (partly_cloudy)
#          "\U000F0597", # mdi:weather-rainy (shower, showers)
#          "\U000F0598", # mdi:weather-snowy (snow)
#          "\U000F0593", # mdi:weather-lightning
#          "\U000F067E", # mdi:weather-lightning-rainy (storm, storms)
#          "\U000F059D", # mdi:weather-windy (wind, windy)
#          "\U000F0592", # mdi:weather-hail
          ]

globals:
  - id: active_lvgl_page
    type: std::string

  - id: last_target_temp_heat
    type : float
    restore_value: yes
    initial_value: '22.0'
  - id: last_target_temp_cool
    type : float
    restore_value: yes
    initial_value: '22.0'

lvgl:
###   
  on_idle:
      timeout: !lambda "return (id(display_timeout).state * 1000);"
      then:
        - logger.log: "LVGL is idle"
        - light.turn_off: backlight
#            id: backlight
        - lvgl.pause:
  
  bg_color: black
  scrollbar_mode: "OFF"
  default_font: roboto_reg
  text_color: white
  style_definitions:
    - id: style_menu_button
      align: CENTER
      bg_opa: TRANSP
      shadow_opa: TRANSP
      height: 50
      width: 50
      radius: 50%
    - id: style_menu_button_label
      align: CENTER
      y: 3
      text_font: roboto_med

  pages:
    ### GUI - THERMOSTAT
    - id: main_page
      on_load:
        - globals.set:
            id: active_lvgl_page
            value: '"main_page"'
        - lvgl.widget.enable:
            - plus
            - minus 
            - settings 
        #- lvgl.widget.focus: settings
      on_unload:
        - lvgl.widget.disable:
            - plus
            - minus
            - settings
      widgets:
        - arc:
            id: arc_bg
            height: 468
            width: 468
            align: CENTER
            arc_color: graylight
            arc_opa: COVER
            arc_width: 2
            arc_rounded: false
        - arc:
            id: current_temp_arc
            adjustable: true
            state:
              disabled: true
            min_value: 120    # 12°C (* 10 because decimals not supported)
            max_value: 340    # 34°C
            height: 468
            width: 468
            align: CENTER
            arc_color: graylight
            arc_opa: COVER
            arc_width: 2
            arc_rounded: false
            indicator:
              arc_color: graylight
              arc_opa: COVER
              arc_width: 2
              arc_rounded: false
            knob:
              bg_color: white
            value: 230
            #on_value: !lambda |-
              #  id(hal).target_temperature_high = value / 10.0;
              #- logger.log:
              #    format: "Arc value is: %.0f"
              #    args: [ 'x' ]
              
        - meter:
            id: meter_ticks
            height: 480
            width: 480
            align: CENTER
            bg_opa: TRANSP
            border_width: 0
            scales:
              range_from: 120   # 12°C (* 10 because decimals not supported)
              range_to: 340     # 34°C
              ticks:
                count: 89
                length: 37
                width: 3
                color: graydark
              indicators:
                - line:
                    id: set_temp_needle
                    color: white
                    width: 8
                    r_mod: 10
                    value: 230
                - arc:
                    id: diff_temp_arc
                    start_value: 120
                    end_value: 230
                    color: white
                    width: 2
                    r_mod: 10
        - obj:
            id: mode_bg
            height: 350
            width: 350
            radius: 175
            align: CENTER
            border_width: 0
            bg_color: black
        - roller:
            id: set_temp_roller
            state:
              disabled: true
            align: CENTER
            anim_time: 500ms
            text_font: roboto_med
            text_opa: TRANSP
            bg_opa: TRANSP
            border_width: 0
            text_line_space: 30
            visible_row_count: 2
            selected:
              text_font: roboto_huge
              text_opa: COVER
              bg_opa: TRANSP
              border_width: 0
            options:
              - 13.0
              - 13.5
              - 14.0
              - 14.5
              - 15.0
              - 15.5
              - 16.0
              - 16.5
              - 17.0
              - 17.5
              - 18.0
              - 18.5
              - 19.0 
              - 19.5
              - 20.0
              - 20.5
              - 21.0
              - 21.5
              - 22.0
              - 22.5
              - 23.0
              - 23.5
              - 24.0
              - 24.5
              - 25.0
              - 25.5
              - 26.0
              - 26.5
              - 27.0
              - 27.5
              - 28.0
              - 28.5
              - 29.0
              - 29.5
              - 30.0
            selected_index: 20 
        - label:
            id: celsius_label
            align: CENTER
            x: 100
            y: -43
            text: "°C"
        - label:
            id: mode_label
            align: CENTER
            y: -100
            text: "NESP"
        - label:
            id: weather_icon_label
            hidden: true
            align: CENTER
            y: -100
            text_font: roboto_huge
            text: " "
        - label:
            id: weather_temp_label
            hidden: true
            align: CENTER
            text_font: roboto_huge
            text: " "
        - label:
            id: weather_forecast_label
            hidden: true
            align: CENTER
            y: 70 
            text: " "
        - label:
            id: weather_feels_like_label
            hidden: true
            align: CENTER
            y: 130
            text: " "
        - label:
            id: big_fan_icon_label
            hidden: true
            align: CENTER
            text_font: roboto_huge
            text: " "
        - label:
            id: current_temp_label
            align: CENTER
            y: 75 #80 #210 #195 #120
            text: " "
        - label:
            id: fan_icon_label
            align: CENTER
            y: 210
            text_font: roboto_med
            text: " "
            
        - button:
            id: plus
            state:
              disabled: true
            x: 85
            y: 190
            styles: style_menu_button
            widgets:
              - label:
                  styles: style_menu_button_label
                  text_font: roboto_med
                  text: "\U000F0419"
            on_press:
                - switch.turn_on: buzzer
                - lambda: id(increment_temperature)->execute(0.5);
              
        - button:
            id: minus
            state:
              disabled: true
            x: -85
            y: 190
            styles: style_menu_button
            widgets:
              - label:
                  styles: style_menu_button_label
                  text_font: roboto_med
                  text: "\U000F0377"
            on_press:
                - switch.turn_on: buzzer
                - lambda: id(increment_temperature)->execute(-0.5);
                    
        - button:
            id: settings
            state:
              disabled: true
            x: 0
            y: 210
            styles: style_menu_button
            widgets:
              - label:
                  styles: style_menu_button_label
                  text_font: roboto_med
                  text: "\U000F0493"
            on_press:
              #- logger.log: "settings pressed"
              - switch.turn_on: buzzer 
              - script.execute: goto_menu_page
               
    ### GUI - MENU
    - id: menu_page
      on_load:
        - globals.set:
            id: active_lvgl_page
            value: '"menu_page"'
        - script.execute: update_menu_date_label
        - script.execute: update_menu_weather_label
        - lvgl.widget.enable:
            - menu_back_button
            - menu_power_button
            - menu_mode_button
        - lvgl.widget.focus: menu_power_button
      on_unload:
        - lvgl.widget.disable:
            - menu_back_button
            - menu_power_button
            - menu_mode_button
      widgets:
        - label:
            id: menu_date_label
            align: LEFT_MID
            x: 30
            y: -60
            text_align: LEFT
            text_color: graydark
            text: "SUN 00:00"
        - label:
            id: menu_weather_icon_label
            align: LEFT_MID
            x: 30
            y: -27
            text_align: LEFT
            text: "\U000F050F" #"\U000F0599"
        - label:
            id: menu_weather_label
            align: LEFT_MID
            x: 60
            y: -30
            text_align: LEFT
            text: "00°C"
        - label:
            id: menu_indoor_label
            align: LEFT_MID
            x: 30
            y: 10
            text_align: LEFT
            text_color: graydark
            text: "INDOOR"
        #- label:
        #    id: menu_temp_label
        #    align: LEFT_MID
        #    x: 60
        #    y: 55
        #    text_align: LEFT
        #    text: "00°C"    
        - label:
            id: selected_menu_label
            align: CENTER
            x: 55
            text_font: roboto_med
            text_align: RIGHT
        
            widgets:
              - label:
                  styles: style_menu_button_label
                  text: " " #"\U000F0D81"
        - button:
            id: menu_back_button
            state:
              disabled: true
            x: 182
            y: -105
            styles: style_menu_button
            widgets:
              - label:
                  styles: style_menu_button_label
                  text: "\U000F004D"
            on_focus:
              - lvgl.label.update:
                  id: selected_menu_label
                  text: "Back"
            on_press:
              - switch.turn_on: buzzer
              - script.execute: goto_main_page
        - button:
            id: menu_power_button
            state:
              disabled: true
            x: 210
            y: 0
            styles: style_menu_button
            widgets:
              - label:
                  styles: style_menu_button_label
                  text: "\U000F0425"
            on_focus:
              - if:
                  condition:
                    lambda: 'return (id(hal).mode == CLIMATE_MODE_OFF);' 
                  then:
                    lvgl.label.update:
                      id: selected_menu_label
                      text: "Turn On"
                  else:
                    lvgl.label.update:
                      id: selected_menu_label
                      text: "Turn Off"
            on_press:
              - switch.turn_on: buzzer
              - lambda: id(hal).make_call().set_mode(CLIMATE_MODE_OFF).perform();
              - script.execute: set_mode_off
              - script.execute: goto_main_page
        - button:
            id: menu_mode_button
            state:
              disabled: true
            x: 182
            y: 105
            styles: style_menu_button
            widgets:
              - label:
                  id: menu_mode_button_label
                  styles: style_menu_button_label
                  text: !lambda |-
                    if(id(hal).mode == CLIMATE_MODE_HEAT) 
                      return "\U000F0238";  // mdi:fire
                    else if(id(hal).mode == CLIMATE_MODE_COOL) 
                      return "\U000F0717";  // mdi:snowflake
                    else if(id(hal).mode == CLIMATE_MODE_FAN_ONLY)
                      return "\U000F0210"; // mdi:fan
                    else 
                      return "\U000F1352";  // mdi:hvac
            on_focus:
              - lvgl.label.update:
                  id: selected_menu_label
                  text: "Mode"
            on_press:
              - switch.turn_on: buzzer
              - script.execute: goto_mode_page

    ### GUI - MODE SELECT
    - id: mode_page
      on_load:
        - globals.set:
            id: active_lvgl_page
            value: '"mode_page"'
        - lvgl.widget.enable:
            - mode_back_button
            - mode_cool_button
            - mode_heat_button
            - mode_fan_button
        - lvgl.widget.focus: mode_cool_button
#        - lvgl.widget.focus: !lambda |-
#                    if(id(hal).mode == CLIMATE_MODE_HEAT) 
#                      return mode_heat_button;
#                    else if(id(hal).mode == CLIMATE_MODE_COOL) 
#                      return mode_cool_button;
#                    else if(id(hal).mode == CLIMATE_MODE_FAN_ONLY)
#                      return mode_fan_button
#                    else 
#                      return mode_back_button;
      on_unload:
        - lvgl.widget.disable:
            - mode_back_button
            - mode_cool_button
            - mode_heat_button
            - mode_fan_button
      widgets:
        - label:
            id: selected_mode_label
            align: CENTER
            x: 55
            text_font: roboto_med
            text_align: RIGHT
        - button:
            id: mode_back_button
            state:
              disabled: true
            x: 105    # 210sin(30) clock coords
            y: -182   # 210cos(30)
            styles: style_menu_button
            widgets:
              - label:
                  styles: style_menu_button_label
                  text: "\U000F004D"
            on_focus:
              - lvgl.label.update:
                  id: selected_mode_label
                  text: "Back"
            on_press:
              - switch.turn_on: buzzer
              - script.execute: goto_menu_page

        - button:
            id: mode_cool_button
            state:
              disabled: true
            x: 210
            y: 0
            styles: style_menu_button
            widgets:
              - label:
                  styles: style_menu_button_label
                  text: "\U000F0717"
            on_focus:
              - lvgl.label.update:
                  id: selected_mode_label
                  text: "Cool"
            on_press:
              - switch.turn_on: buzzer
              #- homeassistant.action:
              #    action: climate.set_hvac_mode
              #    data:
              #      entity_id: ${climate_entity}
              #      hvac_mode: "cool"
              - lambda: id(hal).make_call().set_mode(CLIMATE_MODE_COOL).perform();   
              - script.execute: set_mode_cool      
              - script.execute: goto_main_page
        - button:
            id: mode_heat_button
            state:
              disabled: true
            x: 182
            y: 105
            styles: style_menu_button
            widgets:
              - label:
                  styles: style_menu_button_label
                  text: "\U000F0238"
            on_focus:
              - lvgl.label.update:
                  id: selected_mode_label
                  text: "Heat"
            on_press:
              - switch.turn_on: buzzer
              #- homeassistant.action:
              #    action: climate.set_hvac_mode
              #    data:
              #      entity_id: ${climate_entity}
              #      hvac_mode: "heat"
              - lambda: id(hal).make_call().set_mode(CLIMATE_MODE_HEAT).perform();     
              - script.execute: set_mode_heat      
              - script.execute: goto_main_page
        - button:
            id: mode_fan_button
            state:
              disabled: true
            x: 105
            y: 182
            styles: style_menu_button
            widgets:
              - label:
                  styles: style_menu_button_label
                  text: "\U000F0210"
            on_focus:
              - lvgl.label.update:
                  id: selected_mode_label
                  text: "Fan"
            on_press:
              - switch.turn_on: buzzer
              #- homeassistant.action:
              #    action: climate.set_hvac_mode
              #    data:
              #      entity_id: ${climate_entity}
              #      hvac_mode: "fan_only"   
              - lambda: id(hal).make_call().set_mode(CLIMATE_MODE_FAN_ONLY).perform();  
              - script.execute: set_mode_fan      
              - script.execute: goto_main_page

script:
  # navigate to pages with animation
  - id: goto_main_page
    then:
      - lvgl.page.show:
          id: main_page
          animation: FADE_OUT
          time: 500ms
  - id: goto_menu_page
    then:
      - lvgl.page.show:
          id: menu_page
          animation: FADE_IN
          time: 500ms
  - id: goto_mode_page
    then:
      - lvgl.page.show:
          id: mode_page
          animation: FADE_IN
          time: 500ms

  # hvac mode UI scripts
  - id: update_menu_date_label
    then:
      - lvgl.label.update:
          id: menu_date_label
          text: !lambda |-
            auto now = id(pcf85063_time).now();
            static const char * const day_names[] = {"SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"};
            static char buf[10];
            snprintf(buf, sizeof(buf), "%s %02d:%02d", day_names[now.day_of_week-1], now.hour, now.minute);
            return buf;
  
  - id: update_menu_temp_label
    then:
      - lvgl.label.update:
          id: current_temp_label 
          #text_color: white
          text: !lambda return str_sprintf("%.1f°C  %.1f%%RH", id(room_temperature).state, id(room_humidity).state); 
            
  - id: set_mode_idle
    then:
      - script.execute: set_hvac_mode
                    
  - id: set_mode_off 
    then:                 
          - script.execute: hide_widgets
          - lvgl.label.update:
              id: mode_label
              text: "OFF"
          - lvgl.widget.update:
              id: mode_bg
              bg_color: black
          - lvgl.label.update:
              id: menu_mode_button_label
              text_color: white
              text: "\U000F1352" #"\U000F0717"
          - lvgl.widget.update:
              id: menu_power_button
              text_color: graydark
          - lvgl.widget.update:
              id: mode_heat_button
              text_color: white
          - lvgl.widget.update:
              id: mode_cool_button
              text_color: white
          - lvgl.widget.update:
              id: mode_fan_button
              text_color: white
              
  - id: set_hvac_mode
    then: 
      - script.execute: show_widgets
      - lvgl.label.update:
          id: mode_label
          text: !lambda |-
                  if(id(hal).mode == CLIMATE_MODE_HEAT) 
                    return "HEAT TO";
                  else 
                    return "COOL TO";
      - lvgl.widget.update:
          id: mode_bg
          bg_color: !lambda |-
                  if(id(hal).action == CLIMATE_ACTION_IDLE  || id(hal).action == CLIMATE_ACTION_OFF) {
                    return black;
                  }
                  else {
                    if(id(hal).mode == CLIMATE_MODE_HEAT) 
                      return mode_heat;
                    else 
                      return mode_cool;
                  }
      - lvgl.label.update:
          id: menu_mode_button_label
          text_color: !lambda |-
                    if(id(hal).mode == CLIMATE_MODE_HEAT) 
                      return mode_heat;  
                    else if(id(hal).mode == CLIMATE_MODE_COOL) 
                      return mode_cool;  
                    else 
                      return white;  
          text: !lambda |-
                    if(id(hal).mode == CLIMATE_MODE_HEAT) 
                      return "\U000F0238";  // mdi:fire
                    else if(id(hal).mode == CLIMATE_MODE_COOL) 
                      return "\U000F0717";  // mdi:snowflake
                    else 
                      return "\U000F1352";  // mdi:hvac
      - lvgl.widget.update:
          id: menu_power_button
          text_color: white
      - lvgl.widget.update:
          id: mode_heat_button
          text_color: !lambda |-
                          if(id(hal).mode == CLIMATE_MODE_HEAT) return mode_heat;
                          return white;
      - lvgl.widget.update:
          id: mode_cool_button
          text_color: !lambda |-
                          if(id(hal).mode == CLIMATE_MODE_COOL) return mode_cool;
                          return white;
      - lvgl.widget.update:
          id: mode_fan_button
          text_color: white
      
  - id: set_mode_heat
    then:
      - script.execute: set_hvac_mode
              
  - id: set_mode_cool
    then:
      - script.execute: set_hvac_mode
    
  - id: set_mode_fan
    then:
      - script.execute: show_widgets
      - lvgl.widget.hide:
          - current_temp_arc
          - set_temp_roller
          - celsius_label
          - fan_icon_label
      - lvgl.indicator.update:
          id: set_temp_needle
          opa: TRANSP
      - lvgl.indicator.update:
          id: diff_temp_arc
          opa: TRANSP
      - lvgl.widget.show:
          - big_fan_icon_label
      - lvgl.label.update:
          id: mode_label
          text: "FAN ONLY"
      - lvgl.widget.update:
          id: mode_bg
          bg_color: mode_fan
      - lvgl.label.update:
          id: menu_mode_button_label
          text_color: mode_fan
          text: "\U000F0210"
      - lvgl.widget.update:
          id: menu_power_button
          text_color: white
      - lvgl.widget.update:
          id: mode_heat_button
          text_color: white
      - lvgl.widget.update:
          id: mode_cool_button
          text_color: white
      - lvgl.widget.update:
          id: mode_fan_button
          text_color: mode_fan

  - id: update_menu_weather_label
    then:
      - lvgl.label.update:
          id: menu_weather_label
          text: 
            format: "%.0f°C"
            args: [ 'round(id(hal).current_temperature)']

  - id: show_widgets
    then:
      - lvgl.widget.show:
        - current_temp_arc
        - set_temp_roller
        - celsius_label
        - current_temp_label
        - meter_ticks
        - mode_label
        - plus
        - minus 
        - settings 
      - lvgl.widget.hide:
        - big_fan_icon_label
        - weather_icon_label
        - weather_temp_label
        - weather_forecast_label
        - weather_feels_like_label
      - lvgl.indicator.update:
          id: set_temp_needle
          opa: COVER
      - lvgl.indicator.update:
          id: diff_temp_arc
          opa: COVER
  - id: hide_widgets
    then:
      - lvgl.widget.hide:
        - big_fan_icon_label
        - current_temp_arc
        - set_temp_roller
        - celsius_label
        - fan_icon_label
        - meter_ticks
      - lvgl.widget.show:
      - lvgl.indicator.update:
          id: set_temp_needle
          opa: TRANSP
      - lvgl.indicator.update:
          id: diff_temp_arc
          opa: TRANSP
          
  - id: update_roller_needle_and_arc
    then:
      if:
          condition:
            lambda: 'return (id(hal).target_temperature_low <= ${max_thermostat_temp}) && (id(hal).target_temperature_low >= ${min_thermostat_temp}) && (id(hal).target_temperature_high <= ${max_thermostat_temp}) && (id(hal).target_temperature_high >= ${min_thermostat_temp});' 
          then:
            - script.execute: _update_roller_needle_and_arc  
            
  - id: _update_roller_needle_and_arc
    then:
       if:
          condition:
            lambda: 'return id(hal).mode == CLIMATE_MODE_HEAT;'
          then:
          - lvgl.indicator.update:
              id: set_temp_needle
              value: !lambda return id(hal).target_temperature_low * 10.0;
          - lvgl.arc.update:
              id: current_temp_arc
              value: !lambda return id(hal).current_temperature * 10.0;
          - lvgl.indicator.update:
              id: diff_temp_arc
              start_value: !lambda |-
                return id(hal).target_temperature_low < id(hal).current_temperature ? id(hal).target_temperature_low * 10.0 : id(hal).current_temperature * 10.0;
              end_value: !lambda |-
                if(id(hal).current_temperature < ${min_thermostat_temp})
                  return ${min_thermostat_temp} * 10.0;
                if(isnan(id(hal).current_temperature))
                  return ${min_thermostat_temp} * 10.0;
                return id(hal).target_temperature_low < id(hal).current_temperature ? id(hal).current_temperature * 10.0 : id(hal).target_temperature_low * 10.0;
          - lvgl.roller.update:
              id: set_temp_roller
              selected_index: !lambda return 2 * (id(hal).target_temperature_low - ${min_thermostat_temp});  # returns index of roller value
          else:
          - lvgl.indicator.update:
              id: set_temp_needle
              value: !lambda return id(hal).target_temperature_high * 10.0;
          - lvgl.arc.update:
              id: current_temp_arc
              value: !lambda return id(hal).current_temperature * 10.0;
          - lvgl.indicator.update:
              id: diff_temp_arc
              start_value: !lambda |-
                return id(hal).target_temperature_high < id(hal).current_temperature ? id(hal).target_temperature_high * 10.0 : id(hal).current_temperature * 10.0;
              end_value: !lambda |-
                return id(hal).target_temperature_high < id(hal).current_temperature ? id(hal).current_temperature * 10.0 : id(hal).target_temperature_high * 10.0;
          - lvgl.roller.update:
              id: set_temp_roller
              selected_index: !lambda return 2 * (id(hal).target_temperature_high - ${min_thermostat_temp});  # returns index of roller value   
              

  - id: increment_temperature
    parameters:
      temperature: float
    then:
      - lambda: |-
            //static const char* TAG = "Test";
            //ESP_LOGI(TAG, "value: %f", temperature);
            if(id(hal).mode == CLIMATE_MODE_HEAT) {    // Need to adjust target_temperature_low
              //id(hal).target_temperature_high += temperature;
              id(hal).target_temperature_low += temperature;
              id(update_roller_needle_and_arc).execute(); 
            }
            if(id(hal).mode == CLIMATE_MODE_COOL) {   // Need to adjust target_temperature_high
              //id(hal).target_temperature_low += temperature;
              id(hal).target_temperature_high += temperature;
              id(update_roller_needle_and_arc).execute();
            }
            
  - id: set_target_temperature
    parameters:
      temperature: float
    then:
      - lambda: |-
            //static const char* TAG = "Test";
            //ESP_LOGI(TAG, "value: %f", temperature);
            if(id(hal).mode == CLIMATE_MODE_HEAT) {    // Need to adjust target_temperature_low
              id(hal).target_temperature_low = temperature;
              id(update_roller_needle_and_arc).execute(); 
            }
            if(id(hal).mode == CLIMATE_MODE_COOL) {   // Need to adjust target_temperature_high
              id(hal).target_temperature_high = temperature;
              id(update_roller_needle_and_arc).execute();
            }  
 
